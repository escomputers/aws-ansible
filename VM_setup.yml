- hosts: aws_instances
  #connection: ssh
  become: yes
  
  tasks:
  #Crea filesystem per la partizione docker
  - name: Formatting empy volume with XFS
    filesystem:
      fstype: xfs
      dev: /dev/xvdb

  #Crea directory per docker storage
  - name: Creating docker directory
    file: 
      path: "{{ docker_path }}"
      state: directory
      mode: '0770'
      
  #Monta directory
  - name: Mounting docker directory
    mount:
      src: /dev/xvdb
      path: "{{ docker_path }}"
      fstype: xfs
      state: present
    
  #Prendi l'identificativo del volume non root
  - name: Getting volume UUID
    shell: sudo lsblk -f | grep -v xvda | awk '! /[AEJK]/ {print $3}'
    register: volume_UUID
    
  #Leggi fstab
  - name: Reading fstab
    register: fstab_result
    shell: "cat /etc/fstab"
    
  #Monta volume all'avvio qualora non lo sia
  - name: Editing fstab
    lineinfile:
      path: /etc/fstab
      line: UUID={{ volume_UUID.stdout }} {{ docker_path }}   xfs     defaults,nofail 0 2
    register: edit_fstab
    when: volume_UUID.stdout not in fstab_result.stdout
    
  #Ricarica demone di sistema
  - name: Reloading system services
    systemd:
      daemon_reload: yes
    when: volume_UUID.stdout not in fstab_result.stdout
    
  #Acquisisci info sui pacchetti installati sul sistema
  - name: Gathering system packages informations
    package_facts:
      manager: auto
  
  #Installa Docker
  - name: Checking current distribution
    set_fact:
        distribution: "{{ ansible_distro }}"
    when: '"docker-ce" not in ansible_facts.packages'
      
  - name: Downloading signing key
    rpm_key:
      key: "https://download.docker.com/linux/{{ distribution }}/gpg"
      state: present
    when: '"docker-ce" not in ansible_facts.packages'
    
  - name: Adding repository into system repo list
    yum_repository:
      name: docker
      description: docker repo
      baseurl: "https://download.docker.com/linux/{{ distribution }}/$releasever/$basearch/stable"
      enabled: true
      gpgcheck: true
      gpgkey: "https://download.docker.com/linux/{{ distribution }}/gpg"
    when: '"docker-ce" not in ansible_facts.packages'
    
  - name: Installing Docker
    yum:
      name:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-compose-plugin
      state: present
    when: '"docker-ce" not in ansible_facts.packages'
    
  - name: Enabling Docker as system service
    service:
      name: docker
      enabled: true
      state: started
    when: '"docker-ce" not in ansible_facts.packages'
   
  #Controlla se l'attuale directory di docker e' stata gia' spostata
  - name: Registering real docker system directory
    stat:
      path: '{{ docker_path }}/volumes'
    register: docker_real_dir
          
  #Sposta la docker directory nella partizione dedicata   
  - name: Moving docker directory...stopping docker service
    service:
      name: docker 
      state: stopped
    when: docker_real_dir.stat.exists == false
    
  - name: Configuring docker daemon
    copy:
      content: '{"data-root": "{{ docker_path }}", "log-driver": "json-file", "log-opts": {"max-size": "10m","max-file": "3"}
      }'
      dest: /etc/docker/daemon.json
    when: docker_real_dir.stat.exists == false
    
  - name: Setting docker directory permissions
    file: 
      path: /var/lib/docker
      mode: '0770'
      recurse: yes
    when: docker_real_dir.stat.exists == false
  
  - name: Installing rsync
    yum:
      name: rsync
      state: present
    when: '"rsync" not in ansible_facts.packages'
  
  - name: Syncing directories
    shell: sudo rsync -a /var/lib/docker "{{ user_path }}"
    when: docker_real_dir.stat.exists == false
    
  - name: Renaming old docker directory
    shell: sudo mv /var/lib/docker /var/lib/docker.old
    when: docker_real_dir.stat.exists == false
    
  - name: Starting docker service
    service:
      name: docker 
      state: started
    when: docker_real_dir.stat.exists == false
  
  #Aggiungi utente al gruppo docker 
  - name: Adding current user to docker group
    user:
      name: "{{ instance_user }}"
      groups: docker
      append: yes
      
  #Configura Docker swarm
  #- name: Configuring Docker swarm
  #  shell: ansible-playbook -i inventory.yml VM_setup.yml --ask-vault-pass
